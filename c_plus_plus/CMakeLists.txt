cmake_minimum_required (VERSION 3.10)
project (Planes)

set(CMAKE_AUTOMOC ON)
set(CMAKE_AUTOUIC ON)
set(CMAKE_INCLUDE_CURRENT_DIR ON)
set(CMAKE_AUTORCC ON)
set(CMAKE_WINDOWS_EXPORT_ALL_SYMBOLS 1)

find_package(Qt5 COMPONENTS Core Widgets Quick)

option(With_Asan "Compile with Address Sanitizer support" OFF)


if (UNIX)
	set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=gnu++11 ")
	if (With_Asan)
		set (CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -fno-omit-frame-pointer -fsanitize=address")
		set (CMAKE_LINKER_FLAGS_DEBUG "${CMAKE_LINKER_FLAGS_DEBUG} -fno-omit-frame-pointer -fsanitize=address")
	endif (With_Asan)
endif (UNIX)

add_subdirectory(PlanesWidget)
add_subdirectory(PlanesGraphicsScene)
add_subdirectory(PlanesQML)
add_subdirectory(common)


set(ROOT_PATH ${Qt5_DIR}/../../../)

if (NOT UNIX)
	install(FILES ${ROOT_PATH}/bin/Qt5Core.dll DESTINATION bin)
	install(FILES ${ROOT_PATH}/bin/Qt5Gui.dll DESTINATION bin)
	install(FILES ${ROOT_PATH}/bin/Qt5Widgets.dll DESTINATION bin)
	install(FILES ${ROOT_PATH}/bin/Qt5Qml.dll DESTINATION bin)
	install(FILES ${ROOT_PATH}/bin/Qt5QmlWorkerScript.dll DESTINATION bin)
	install(FILES ${ROOT_PATH}/bin/Qt5QmlModels.dll DESTINATION bin)
	install(FILES ${ROOT_PATH}/bin/Qt5Network.dll DESTINATION bin)
	install(FILES ${ROOT_PATH}/bin/Qt5QuickControls2.dll DESTINATION bin)
	install(FILES ${ROOT_PATH}/bin/Qt5Quick.dll DESTINATION bin)
	install(FILES ${ROOT_PATH}/bin/Qt5QuickTemplates2.dll DESTINATION bin)
	install(DIRECTORY ${ROOT_PATH}/qml/QtQuick/Controls DESTINATION bin/QtQuick/)
	install(DIRECTORY ${ROOT_PATH}/qml/QtQuick/Controls.2 DESTINATION bin/QtQuick/)
	install(DIRECTORY ${ROOT_PATH}/qml/QtQuick/Dialogs DESTINATION bin/QtQuick/)
	install(DIRECTORY ${ROOT_PATH}/qml/QtQuick/Layouts DESTINATION bin/QtQuick/)
	install(DIRECTORY ${ROOT_PATH}/qml/QtQuick/Templates.2 DESTINATION bin/QtQuick/)
	install(DIRECTORY ${ROOT_PATH}/qml/QtQuick/Window.2 DESTINATION bin/QtQuick/)		
	install(DIRECTORY ${ROOT_PATH}/qml/QtQuick.2 DESTINATION bin)
	install(DIRECTORY ${ROOT_PATH}/qml/QtQml DESTINATION bin)
	install(FILES ${ROOT_PATH}/plugins/platforms/qwindows.dll DESTINATION bin/platforms)
endif (NOT UNIX)

#uses mingw in windows to create windows installer
if (MINGW)
	install(FILES $ENV{MINGW_HOME}/bin/libgcc_s_seh-1.dll DESTINATION bin)
	install(FILES $ENV{MINGW_HOME}/bin/libstdc++-6.dll DESTINATION  bin)
	install(FILES $ENV{MINGW_HOME}/bin/libwinpthread-1.dll DESTINATION  bin)
endif (MINGW)

if (${QT_VERSION} MATCHES "[0-9]\\.[0-9]+\\.[0-9]+")
	string(REGEX MATCH "[0-9]\\.[0-9]+\\.[0-9]+" QT_VERSION ${ROOT_PATH})
	string(REPLACE "." ";" QT_VERSION_LIST ${QT_VERSION})
	list(GET QT_VERSION_LIST 0 QT_MAJOR)
	list(GET QT_VERSION_LIST 1 QT_MINOR)
	list(GET QT_VERSION_LIST 2 QT_REVISION)
	set(ROOT_PATH ${Qt5_DIR}/../../)
else()
	set(QT_MAJOR "5")
	set(QT_MINOR "15")
	set(QT_REVISION "5")
	set(ROOT_PATH ${Qt5_DIR}/../../)
endif()

message("Used Qt Version: " ${QT_MAJOR} " " ${QT_MINOR} " " ${QT_REVISION})

#todo: install qml in linux
if (UNIX)
	install(FILES ${ROOT_PATH}/libQt5Widgets.so.${QT_MAJOR}.${QT_MINOR}.${QT_REVISION} DESTINATION lib)
	install(FILES ${ROOT_PATH}/libQt5Gui.so.${QT_MAJOR}.${QT_MINOR}.${QT_REVISION} DESTINATION lib)
	install(FILES ${ROOT_PATH}/libQt5Core.so.${QT_MAJOR}.${QT_MINOR}.${QT_REVISION} DESTINATION lib)
	install(FILES ${ROOT_PATH}/libQt5Qml.so.${QT_MAJOR}.${QT_MINOR}.${QT_REVISION} DESTINATION lib)
	install(FILES ${ROOT_PATH}/libQt5QmlWorkerScript.so.${QT_MAJOR}.${QT_MINOR}.${QT_REVISION} DESTINATION lib)
	install(FILES ${ROOT_PATH}/libQt5QmlModels.so.${QT_MAJOR}.${QT_MINOR}.${QT_REVISION} DESTINATION lib)	
	install(FILES ${ROOT_PATH}/libQt5Network.so.${QT_MAJOR}.${QT_MINOR}.${QT_REVISION} DESTINATION lib)
    install(FILES ${ROOT_PATH}/libQt5DBus.so.${QT_MAJOR}.${QT_MINOR}.${QT_REVISION} DESTINATION lib)
    install(FILES ${ROOT_PATH}/libQt5XcbQpa.so.${QT_MAJOR}.${QT_MINOR}.${QT_REVISION} DESTINATION lib)
	
	install(FILES ${ROOT_PATH}/libQt5Widgets.so.${QT_MAJOR}.${QT_MINOR} DESTINATION lib)
	install(FILES ${ROOT_PATH}/libQt5Gui.so.${QT_MAJOR}.${QT_MINOR} DESTINATION lib)
	install(FILES ${ROOT_PATH}/libQt5Core.so.${QT_MAJOR}.${QT_MINOR} DESTINATION lib)
	install(FILES ${ROOT_PATH}/libQt5Qml.so.${QT_MAJOR}.${QT_MINOR} DESTINATION lib)
	install(FILES ${ROOT_PATH}/libQt5QmlWorkerScript.so.${QT_MAJOR}.${QT_MINOR} DESTINATION lib)
	install(FILES ${ROOT_PATH}/libQt5QmlModels.so.${QT_MAJOR}.${QT_MINOR} DESTINATION lib)
	install(FILES ${ROOT_PATH}/libQt5Network.so.${QT_MAJOR}.${QT_MINOR} DESTINATION lib)
	install(FILES ${ROOT_PATH}/libQt5DBus.so.${QT_MAJOR}.${QT_MINOR} DESTINATION lib)
	install(FILES ${ROOT_PATH}/libQt5XcbQpa.so.${QT_MAJOR}.${QT_MINOR} DESTINATION lib)

	install(FILES ${ROOT_PATH}/libQt5Widgets.so.${QT_MAJOR} DESTINATION lib)
	install(FILES ${ROOT_PATH}/libQt5Gui.so.${QT_MAJOR} DESTINATION lib)
	install(FILES ${ROOT_PATH}/libQt5Core.so.${QT_MAJOR} DESTINATION lib)
	install(FILES ${ROOT_PATH}/libQt5Qml.so.${QT_MAJOR} DESTINATION lib)
	install(FILES ${ROOT_PATH}/libQt5QmlWorkerScript.so.${QT_MAJOR} DESTINATION lib)
	install(FILES ${ROOT_PATH}/libQt5QmlModels.so.${QT_MAJOR} DESTINATION lib)	
	install(FILES ${ROOT_PATH}/libQt5Network.so.${QT_MAJOR} DESTINATION lib)
    install(FILES ${ROOT_PATH}/libQt5DBus.so.${QT_MAJOR} DESTINATION lib)
    install(FILES ${ROOT_PATH}/libQt5XcbQpa.so.${QT_MAJOR} DESTINATION lib)

	install(FILES ${ROOT_PATH}/libicuuc.so.66.1 DESTINATION lib)
	install(FILES ${ROOT_PATH}/libicudata.so.66.1 DESTINATION lib)
	install(FILES ${ROOT_PATH}/libicui18n.so.66.1 DESTINATION lib)
	install(FILES ${ROOT_PATH}/libicuuc.so.66 DESTINATION lib)
	install(FILES ${ROOT_PATH}/libicudata.so.66 DESTINATION lib)
	install(FILES ${ROOT_PATH}/libicui18n.so.66 DESTINATION lib)
	install(DIRECTORY ${ROOT_PATH}/qt5/plugins/platforms/ DESTINATION bin/platforms/)
	
	install(FILES ${ROOT_PATH}/libQt5QuickControls2.so.${QT_MAJOR}.${QT_MINOR}.${QT_REVISION} DESTINATION lib)
	install(FILES ${ROOT_PATH}/libQt5Quick.so.${QT_MAJOR}.${QT_MINOR}.${QT_REVISION} DESTINATION lib)
	install(FILES ${ROOT_PATH}/libQt5QuickTemplates2.so.${QT_MAJOR}.${QT_MINOR}.${QT_REVISION} DESTINATION lib)
	install(FILES ${ROOT_PATH}/libQt5QuickControls2.so.${QT_MAJOR}.${QT_MINOR} DESTINATION lib)
	install(FILES ${ROOT_PATH}/libQt5Quick.so.${QT_MAJOR}.${QT_MINOR} DESTINATION lib)
	install(FILES ${ROOT_PATH}/libQt5QuickTemplates2.so.${QT_MAJOR}.${QT_MINOR} DESTINATION lib)
	install(FILES ${ROOT_PATH}/libQt5QuickControls2.so.${QT_MAJOR} DESTINATION lib)
	install(FILES ${ROOT_PATH}/libQt5Quick.so.${QT_MAJOR} DESTINATION lib)
	install(FILES ${ROOT_PATH}/libQt5QuickTemplates2.so.${QT_MAJOR} DESTINATION lib)	
	
	
	install(DIRECTORY ${ROOT_PATH}/qt5/qml/QtQuick/Controls DESTINATION bin/QtQuick/)
	install(DIRECTORY ${ROOT_PATH}/qt5/qml/QtQuick/Controls.2 DESTINATION bin/QtQuick/)
	install(DIRECTORY ${ROOT_PATH}/qt5/qml/QtQuick/Dialogs DESTINATION bin/QtQuick/)
	install(DIRECTORY ${ROOT_PATH}/qt5/qml/QtQuick/Layouts DESTINATION bin/QtQuick/)
	install(DIRECTORY ${ROOT_PATH}/qt5/qml/QtQuick/Templates.2 DESTINATION bin/QtQuick/)
	install(DIRECTORY ${ROOT_PATH}/qt5/qml/QtQuick/Window.2 DESTINATION bin/QtQuick/)	
	install(DIRECTORY ${ROOT_PATH}/qt5/qml/QtQuick.2 DESTINATION bin)
	install(DIRECTORY ${ROOT_PATH}/qt5/qml/QtQml DESTINATION bin)

	install(FILES ${ROOT_PATH}/libGL.so.1 DESTINATION lib)
	install(FILES ${ROOT_PATH}/libGL.so.1.7.0 DESTINATION lib)
	install(FILES ${ROOT_PATH}/libpng16.so.16 DESTINATION lib)
	install(FILES ${ROOT_PATH}/libpng16.so.16.37.0 DESTINATION lib)
	install(FILES ${ROOT_PATH}/libharfbuzz.so.0 DESTINATION lib)
	install(FILES ${ROOT_PATH}/libharfbuzz.so.0.20600.4 DESTINATION lib)
	install(FILES ${ROOT_PATH}/libmd4c.so.0 DESTINATION lib)
	install(FILES ${ROOT_PATH}/libmd4c.so.0.4.8 DESTINATION lib)
	install(FILES ${ROOT_PATH}/libdouble-conversion.so.3 DESTINATION lib)
	install(FILES ${ROOT_PATH}/libdouble-conversion.so.3.1 DESTINATION lib)

	install(FILES ${ROOT_PATH}/libpcre2-16.so.0 DESTINATION lib)
	install(FILES ${ROOT_PATH}/libpcre2-16.so.0.9.0 DESTINATION lib)
	install(FILES ${ROOT_PATH}/libglib-2.0.so.0 DESTINATION lib)
	install(FILES ${ROOT_PATH}/libglib-2.0.so.0.6400.6 DESTINATION lib)
	install(FILES ${ROOT_PATH}/libGLdispatch.so.0 DESTINATION lib)
	install(FILES ${ROOT_PATH}/libGLdispatch.so.0.0.0 DESTINATION lib)
	install(FILES ${ROOT_PATH}/libGLX.so.0 DESTINATION lib)
	install(FILES ${ROOT_PATH}/libGLX.so.0.0.0 DESTINATION lib)

	install(FILES ${ROOT_PATH}/libfreetype.so.6 DESTINATION lib)
	install(FILES ${ROOT_PATH}/libfreetype.so.6.17.1 DESTINATION lib)
	install(FILES ${ROOT_PATH}/libgraphite2.so.3 DESTINATION lib)
	install(FILES ${ROOT_PATH}/libgraphite2.so.3.2.1 DESTINATION lib)
	#install(FILES ${ROOT_PATH}/libkrb5support.so.0 DESTINATION lib)

	install(FILES ${ROOT_PATH}/libX11.so.6 DESTINATION lib)
	#install(FILES ${ROOT_PATH}/libbrotlidec.so.1 DESTINATION lib)
	#install(FILES ${ROOT_PATH}/libkeyutils.so.1 DESTINATION lib)
	#install(FILES ${ROOT_PATH}/libresolv.so.2 DESTINATION lib)
	#install(FILES ${ROOT_PATH}/libxcb.so.1 DESTINATION lib)
	#install(FILES ${ROOT_PATH}/libbrotlicommon.so.1 DESTINATION lib)
	#install(FILES ${ROOT_PATH}/libXau.so.6 DESTINATION lib)
	#install(FILES ${ROOT_PATH}/libXdmcp.so.6 DESTINATION lib)
	#install(FILES ${ROOT_PATH}/libbsd.so.0 DESTINATION lib)
	#install(FILES ${ROOT_PATH}/libmd.so.0 DESTINATION lib)



	
	install(FILES ${CMAKE_CURRENT_SOURCE_DIR}/PlanesWidget.sh PERMISSIONS WORLD_EXECUTE WORLD_WRITE WORLD_READ DESTINATION .)
	install(FILES ${CMAKE_CURRENT_SOURCE_DIR}/PlanesGraphicsScene.sh PERMISSIONS WORLD_EXECUTE WORLD_WRITE WORLD_READ DESTINATION .)
	install(FILES ${CMAKE_CURRENT_SOURCE_DIR}/PlanesQML.sh PERMISSIONS WORLD_EXECUTE WORLD_WRITE WORLD_READ OWNER_EXECUTE OWNER_WRITE OWNER_READ GROUP_WRITE GROUP_READ GROUP_EXECUTE DESTINATION .)
	SET(CMAKE_INSTALL_RPATH "${CMAKE_INSTALL_PREFIX}/lib")
endif (UNIX)
